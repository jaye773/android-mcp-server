name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Use repository flake8 config for style checks
        flake8 src --count --statistics

    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=80 \
          --asyncio-mode=auto \
          -m "not slow"

    - name: Run slow tests (if not Windows)
      if: matrix.os != 'windows-latest'
      run: |
        pytest tests/ -v -m "slow" --asyncio-mode=auto

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run integration tests
      run: |
        pytest tests/ -v \
          --asyncio-mode=auto \
          -m "integration" \
          --tb=short

    - name: Run end-to-end tests
      run: |
        pytest tests/ -v \
          --asyncio-mode=auto \
          -m "e2e" \
          --tb=short

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json

    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run performance tests
      run: |
        pytest tests/ -v \
          --asyncio-mode=auto \
          -m "performance" \
          --tb=short

    - name: Generate performance report
      run: |
        echo "Performance test results would be analyzed here"
        # Could integrate with tools like pytest-benchmark
